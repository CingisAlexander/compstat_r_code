# Generate 1000 samples of specific normal distribution
X1 <- rnorm(1000, mean = 0, sd = 1)
X2 <- rnorm(1000, mean = 4, sd = 1)
S <- X1 + X2
hist(S)
hist(S, probability = TRUE)
# b)
p = c(0.1, 0.4, 0.6, 0.8)
generate_gaussian_mixture <- function(p){
step1 <- sample(c(1, 0), size = 1000, replace= TRUE, prob = c(p,1-p))
random_mixture <- step1 *rnorm(1000, mean = 0, sd = 1) + (1-step1)*rnorm(1000, mean = 4, sd = 1)
}
test <- generate_gaussian_mixture(0.1)
hist(test, probability = TRUE)
test <- generate_gaussian_mixture(0.6)
hist(test, probability = TRUE)
test <- generate_gaussian_mixture(0.5)
hist(test, probability = TRUE)
random_mixtures <- lapply(p, generate_gaussian_mixture)
# b)
n <- 1000
mix_samples <- data.frame(p = rep(p, each = n),x = unlist(random_mixtures))
View(mix_samples)
################################ Problem 2
library(ggplot2)
ggplot(mix_samples, aes(x)) + geom_density() +
#split the plot by different probabilities
facet_wrap(~p,labeller = label_both)
ggplot(mix_samples, aes(x)) + geom_density() +
ggplot(mix_samples, aes(x)) + geom_density()
ggplot(mix_samples, aes(x)) + geom_density()
# a)
# the expextation of Gamma mixture
expecation <- 3*(sum(theta*(3/lambda)))
################################ Problem 3
# general setting
lambda = c(0.5, 1, 1.5, 2, 2.5, 3)
theta = c(0.1, 0.1, 0.2, 0.2, 0.3, 0.1)
# a)
# the expextation of Gamma mixture
expecation <- 3*(sum(theta*(3/lambda)))
variance <- theta*((3/lambda^2)+(3/lambda)) - expectation
# a)
# the expextation of Gamma mixture
expectation <- 3*(sum(theta*(3/lambda)))
variance <- theta*((3/lambda^2)+(3/lambda)) - expectation
# b)
step1 <- sample(x = 1:6, size = 5000, replace = FALSE, prob = theta)
# b)
step1 <- sample(x = 1:6, size = 5000, replace = TRUE, prob = theta)
mix_samples <- sapply(step1, FUN = function(idx){return(rgamma(1,shape = 3, rate = lambda[idx]))})
ggplot(data = data.frame(x = mix_samples), aes(x)) + geom_density()
# a)
# the expextation of Gamma mixture
expectation <- (sum(theta*(3/lambda)))
variance <- theta*(sum(3/lambda^2)+(3/lambda)) - expectation
variance <- sum(theta*((3/lambda^2)+(3/lambda))) - expectation
variance <- sum(theta*((3/lambda^2)+(3/lambda))) - expectation^2
variance <- 3*sum((theta/lambda^2)+(theta/lambda)) - expectation^2
variance <- sum(3*(theta/lambda^2)+9*(theta/lambda^2)) - expectation^2
for(lambda_i in lambda){
p <- p + stat_function(fun = dgamma, args = list(shape = 3, rate = lambda_i),
linetype = "dashed")
l
}
for(lambda_i in lambda){
p <- p + stat_function(fun = dgamma, args = list(shape = 3, rate = lambda_i),
linetype = "dashed")
}
p
p <- ggplot(data = data.frame(x = mix_samples), aes(x)) + geom_density(color = "red", size = 1)
for(lambda_i in lambda){
p <- p + stat_function(fun = dgamma, args = list(shape = 3, rate = lambda_i),
linetype = "dashed")
}
p
sigma <- matrix(c(1, -.8, -.5, -.8, 1, .2, -.5, .2, 1), nrow = 3,
ncol = 3,byrow =  TRUE)
sigma
chol(sigma)
Mu <- rep(mu, n)
################################ Problem 3
# general setting
n <- 200
mu <- c(1,3,0)
sigma <- matrix(c(1, -.8, -.5, -.8, 1, .2, -.5, .2, 1), nrow = 3,
ncol = 3,byrow =  TRUE)
Z <- rnom(n*3)
Z <- rnorm(n*3)
Z <- matrix(Z, nrow = n)
Mu <- rep(mu, n)
Mu <- matrix(Mu, nrow = n, byrow = TRUE)
Mu
Q <- chol(sigma)
X <- Z%*%Q + Mu
library(GGally)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
n <- 200
mu <- c(1,3,0)
sigma <- matrix(c(1, -.8, -.5, -.8, 1, .2, -.5, .2, 1), nrow = 3,
ncol = 3,byrow =  TRUE)
Z <- rnorm(n*3)
Z <- matrix(Z, nrow = n)
Mu <- rep(mu, n)
Mu <- matrix(Mu, nrow = n, byrow = TRUE)
Q <- chol(sigma)
X <- Z%*%Q + Mu
library(GGally)
ggpairs(data.frame(X))
n <- 1000
mu <- c(1,3,0)
sigma <- matrix(c(1, -.8, -.5, -.8, 1, .2, -.5, .2, 1), nrow = 3,
ncol = 3,byrow =  TRUE)
Z <- rnorm(n*3)
Z <- matrix(Z, nrow = n)
Mu <- rep(mu, n)
Mu <- matrix(Mu, nrow = n, byrow = TRUE)
Q <- chol(sigma)
X <- Z%*%Q + Mu
library(GGally)
ggpairs(data.frame(X))
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
################################ Problem 2
library(ggplot2)
# a)
# generall setting
n <- 1000
# Generate 1000 samples of specific normal distribution
X1 <- rnorm(n, mean = 0, sd = 1)
X2 <- rnorm(n, mean = 4, sd = 1)
S <- X1 + X2
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram() +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2), size = 1))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density))) +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2), size = 1))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan") +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2), size = 1))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan") +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2), size = 1))+
scale_x_continuous(breaks = seq(-2,10,2))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan") +
#stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2), size = 1))+
scale_x_continuous(breaks = seq(-2,10,2))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan") +
stat_function(fun = dgamma, args = list(mean = 4, sd = sqrt(2), size = 1))+
scale_x_continuous(breaks = seq(-2,10,2))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan") +
stat_function(fun = dnorm(), args = list(mean = 4, sd = sqrt(2), size = 1))+
scale_x_continuous(breaks = seq(-2,10,2))
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan") +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2), size = 1))+
scale_x_continuous(breaks = seq(-2,10,2))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan") +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2)), size = 1)+
scale_x_continuous(breaks = seq(-2,10,2))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan", fill = "darkcyan") +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2)), size = 1)+
scale_x_continuous(breaks = seq(-2,10,2))
p
# Plot the histogram with the expected density N(4,1)
p <- ggplot(data = data.frame(S = S), aes(x = S)) +
geom_histogram(aes(y = stat(density)), color = "darkcyan", fill = "darkcyan",
alpha = 0.5) +
stat_function(fun = dnorm, args = list(mean = 4, sd = sqrt(2)), size = 1)+
scale_x_continuous(breaks = seq(-2,10,2))
p
# alternative solution
rate <- sample(x = lambda, size = n, prob = theta)
mix_samples <- rgamma(n = n, shape = 3, rate = rate)
################################ Problem 3
# general setting
lambda <- c(0.5, 1, 1.5, 2, 2.5, 3)
theta <- c(0.1, 0.1, 0.2, 0.2, 0.3, 0.1)
n <- 5000
# alternative solution
rate <- sample(x = lambda, size = n, prob = theta)
mix_samples <- rgamma(n = n, shape = 3, rate = rate)
# alternative solution
rate <- sample(x = lambda, size = n, replace = TRUE, prob = theta)
mix_samples <- rgamma(n = n, shape = 3, rate = rate)
p <- ggplot(data = data.frame(x = mix_samples), aes(x)) + geom_density(color = "red", size = 1)
for(lambda_i in lambda){
p <- p + stat_function(fun = dgamma, args = list(shape = 3, rate = lambda_i),
linetype = "dashed")
}
p
generate_multinorm <- function(n, p, mu, Sigma){
M <- matrix(mu, n, p, byrow = TRUE)
Z <- matrix(rnorm(n*p), nrow = n, ncol = p)
Q <- chol(Sigma)
X <- M%*%Q + M
return(X)
}
n <- 1000
mu <- c(1,3,0)
sigma <- matrix(c(1, -.8, -.5, -.8, 1, .2, -.5, .2, 1), nrow = 3,
ncol = 3,byrow =  TRUE)
X200 <- generate_multinorm(n = n, p = 2, mu = mu, Sigma = sigma)
generate_multinorm <- function(n, p, mu, Sigma){
M <- matrix(mu, n, p, byrow = TRUE)
Z <- matrix(rnorm(n*p), nrow = n, ncol = p)
Q <- chol(Sigma)
X <- Z%*%Q + M
return(X)
}
X200 <- generate_multinorm(n = n, p = 2, mu = mu, Sigma = sigma)
X200 <- generate_multinorm(n = n, p = 3, mu = mu, Sigma = sigma)
library(GGally)
ggpairs(data.frame(X200))
